Listing:

   1 MODULE RegexMatching;
   2 
   3 IMPORT RegexParser,FontsFont, texts, Console;
   4 
   5 TYPE Regex=POINTER TO EXTENSIBLE RECORD (RegexParser.RegexType) END;
   6 
   7 VAR i:INTEGER;
   8         
   9         rch:texts.RichChar;
  10         (*tarString:POINTER TO ARRAY OF CHAR;*)
  11         sh:texts.Shared;
  12         
  13 PROCEDURE WriteMessage(str:ARRAY OF CHAR);
  14 BEGIN
  15         Console.WriteString(str);
  16         Console.WriteLn;
  17 END WriteMessage;
  18                 
  19 PROCEDURE WriteEntry(fromProcedure:ARRAY OF CHAR;ch:CHAR;i:INTEGER);
  20 
  21 
  22 BEGIN   
  23         Console.WriteString(fromProcedure +" Entry:  ");                
  24         IF ch # 0X THEN Console.Write(ch);
  25         END;
  26         
  27         IF i >= 0 THEN Console.WriteString(" Position i: "); Console.WriteInt(i,2);
  28         END;
  29         Console.WriteLn();
  30 END WriteEntry;
  31 
  32 
  33 
  34 PROCEDURE WriteExit(fromProcedure:ARRAY OF CHAR;valResult:INTEGER;ch:CHAR;i:INTEGER);
  35 
  36 VAR res:ARRAY 10 OF CHAR; 
  37 BEGIN
  38         IF valResult=1  THEN res:="TRUE" ELSIF valResult=-1 THEN res:="FALSE" ELSE res:=""; END;
  39         Console.WriteString(fromProcedure +" Exit: "+res+"  ");         
  40         IF ch # 0X THEN Console.Write(ch);
  41         END;
  42         IF i >= 0 THEN Console.WriteString(" Position i: ");Console.WriteInt(i,2);
  43         END;
  44         Console.WriteLn();
  45 END WriteExit;
  46 
  47 (*-------------------------Matching Procedures---------------------------*)
  48 
  49 PROCEDURE MatchNegRange(range:RegexParser.Range; VAR flag:BOOLEAN);
  50 BEGIN
  51         WriteMessage("MatchNegRange Entry");
  52         IF sh.backTrack THEN WriteMessage("MatchNegRange backTrack");RETURN END;
  53         REPEAT
  54                 flag:=((rch.ch<range.min) OR (rch.ch>range.max));
  55                 range:=range.next;
  56         UNTIL range=NIL;
  57         WriteMessage("MatchNegRange Exit");
  58 END MatchNegRange;
  59 
  60 PROCEDURE MatchRange(range:RegexParser.Range; VAR flag:BOOLEAN);
  61 BEGIN
  62         WriteEntry("MatchRange ",rch.ch,-1);
  63         IF sh.backTrack THEN RETURN END;
  64         LOOP
  65                 IF range=NIL THEN EXIT END;
  66                 Console.WriteString("MatchRange range.min: "); 
  67                 Console.Write(range.min);
  68                 Console.WriteString(" MatchRange range.max: "); 
  69                 Console.Write(range.max);
  70                 Console.WriteLn();
  71                 flag:=((rch.ch>=range.min) & (rch.ch<=range.max));
  72                 IF flag=TRUE THEN EXIT;
  73                 ELSE range:=range.next 
  74                 END;
  75         END;
  76         (*  are there any  subRanges *)
  77         LOOP
  78                 IF range=NIL THEN EXIT END;
  79                 IF range.sub THEN EXIT END;
  80                 range:=range.next
  81         END;
  82         IF range#NIL THEN MatchNegRange(range,flag) END;
  83         
  84         WriteExit("MatchRange ch ",0,rch.ch,-1);
  85 END MatchRange; 
  86 
  87 
  88 
  89 PROCEDURE FontMatch(rch:texts.RichChar; regex:RegexParser.Regex):INTEGER;
  90 
  91         
  92 
  93 BEGIN
  94         IF regex.Font=NIL THEN RETURN 1 
  95         ELSIF FontsFont.Size(regex.Font,rch) & FontsFont.Style(regex.Font,rch) & 
  96                 FontsFont.Typeface(regex.Font,rch) &  
  97                 FontsFont.Weight(regex.Font,rch) & FontsFont.Color(regex.Font,rch) THEN
  98                 RETURN 1 
  99         ELSE RETURN -1
 100         END;
 101 END FontMatch;
 102 
 103 
 104 PROCEDURE MatchRegex(regex:RegexParser.Regex;resetPos:INTEGER;VAR flag:BOOLEAN);
**** ---------------------^
**** Warning: This variable is accessed from nested procedure
**** ---------------------------------------------^
**** Warning: This variable is accessed from nested procedure
**** Access to variable <regex> will be inefficient
**** Access to variable <resetPos> will be inefficient
 105 VAR  branch:RegexParser.Branch;
 106                 j:INTEGER (*ResetPosition*);
 107                 res:INTEGER;
 108         
 109         PROCEDURE MatchBranch(branch:RegexParser.Branch; VAR flag:BOOLEAN);
 110         VAR piece:RegexParser.Piece;
**** ------------^ Warning: This variable is accessed from nested procedure
**** Access to variable <piece> will be inefficient
 111         res:INTEGER;
 112         
 113                 PROCEDURE MatchPiece(piece:RegexParser.Piece; VAR flag:BOOLEAN);
 114                 VAR atom,temp_atom:RegexParser.Atom;
 115                                 min,max (* nr repetitions *),
 116                                 q (*counts number matches for quantified or for '*' or '+'*),
 117                                 j1:INTEGER (* interim value for i; formerly j; is named here j1 for
 118                                 difference with j in MatchRegex *);
 119                                 temp_flag:BOOLEAN;
 120                                 res:INTEGER;
 121                                 
 122                         PROCEDURE MatchAtom(atom:RegexParser.Atom; VAR flag:BOOLEAN);
 123                         VAR range:RegexParser.Range;res:INTEGER;
 124                         
 125                                 
 126                         BEGIN (* MatchAtom *)
 127                                 WriteEntry("MatchAtom ",' ',-1);
 128                                 IF sh.backTrack THEN 
 129                                         WriteMessage("MatchAtom sh.backTrack RETURN");
 130                                         RETURN 
 131                                 END;
 132                                 IF atom.range=NIL THEN  
 133                                         WriteMessage("MatchAtom range Nil vor MatchRegex");
 134                                         MatchRegex(atom.regex,resetPos,flag);
**** Warning: Non-local variable access here-----------------------^
 135                                 ELSE    
 136                                 
 137                                         rch := sh.getSym();
 138                                                         
 139                                         IF sh.backTrack THEN 
 140                                                 WriteMessage("MatchAtom sh.backtrach nach getSym");
 141                                                 RETURN 
 142                                         END;                    
 143                                         
 144                                         Console.WriteString("MatchAtom getSym ch: ");
 145                                         Console.Write(rch.ch); 
 146                                         Console.WriteLn();
 147                                                 
 148                                         IF atom.range.pos THEN
 149                                                 WriteMessage("MatchAtom range.pos vor MatchRange");
 150                                                 MatchRange(atom.range,flag); 
 151                                         ELSE 
 152                                                 WriteMessage("MatchAtom vor MatchNegRange");
 153                                                 MatchNegRange(atom.range,flag);
 154                                         END;
 155                                 
 156                                 END;
 157                                 IF flag THEN 
 158                                         res:= FontMatch(rch,regex);
**** Warning: Non-local variable access here---------------------^
 159                                         flag:=res=1;                                    
 160                                 ELSE
 161                                         res:=-1;
 162                                 END;
 163                                 
 164                                 WriteExit("MatchAtom result, ch ",res,rch.ch,-1);
 165                         END MatchAtom;
 166                         
 167                 BEGIN (*MatchPiece*) (*hier Matching-Procedures aufrufen piece.MatchProcQuantified(piece,flag)*)
 168                         (*MatchProcOptional (?)*)
 169                         WriteEntry("MatchPiece ",0X,-1);
 170                         IF sh.backTrack THEN RETURN END;
 171                         flag:=FALSE;
 172                         temp_flag:=FALSE;
 173                         q:=0;
 174                         (* get value of i, needed in repeat loops down case 2 and case 3 *)
 175                         i := sh.getSharedText().getParsePos();
 176                         CASE piece.id OF 
 177                                 1:  (* question mark, '?', optional *)
 178                                         WriteMessage("MatchPiece Case 1 Optional");
 179                                 
 180                                         atom:=piece.atom;   
 181                                         min:=0;
 182                                         max:=1;
 183                                         WriteMessage("MatchPiece Case 1 Optional vor MatchAtom");
 184                                         MatchAtom(atom,flag);
 185                                         IF sh.backTrack THEN RETURN END;
 186                                         IF ~flag THEN flag:=TRUE;
 187                                                 IF atom.regex=NIL THEN DEC(i) END
 188                                         END; 
 189                                         sh.getSharedText().setParsePos(i);
 190                 
 191                                 |2: (* repetitions, quantified (???) *)
 192                                         WriteMessage("MatchPiece Case 2 Quantifier ");
 193                                         atom:=piece.atom;   (*Quantified*)
 194                                         min:=piece.min.val;
 195                                         max:=piece.max.val;
 196                                         Console.WriteString("MatchPiece min");Console.WriteInt(min,2);
 197                                         Console.WriteString("MatchPiece max");Console.WriteInt(max,2);
 198                                         q:=0;
 199                                         
 200                                         
 201                                         j1:=i;
 202                                         REPEAT 
 203                                                 WriteMessage("MatchPiece Case 2 quantified in Repeat vor MatchAtom");
 204                                                 MatchAtom(atom,flag);
 205                                                 i:=sh.getSharedText().getParsePos();
 206                                                 IF sh.backTrack THEN 
 207                                                         WriteMessage("MatchPiece in Repeat sh.backTrack");
 208                                                         RETURN 
 209                                                 END;
 210                                                 IF flag THEN INC(q) END;
 211                                         UNTIL (~flag) OR (q=max);
 212                                         IF ~flag & (q>=min) THEN flag:=TRUE; 
 213                                                 IF atom.regex=NIL THEN DEC(i) END 
 214                                         END;
 215                                         sh.getSharedText().setParsePos(i);
 216                                         
 217                                 |3: (* asterisk('*' ) or plus('+') *)
 218                                         WriteMessage("MatchPiece Case 3 * or + ");
 219                                         atom:=piece.atom; (*Unbounded*) (*max=NIL*)
 220                                         temp_atom:=piece.suc.atom;
 221                                         min:=piece.min.val;
 222                                         REPEAT 
 223                                                 WriteMessage("MatchPiece case 3 * or + in Repeat vor MatchAtom 1");
 224                                                 MatchAtom(atom,flag);
 225                                                 IF sh.backTrack THEN RETURN END;
 226                                                 i:=sh.getSharedText().getParsePos();
 227                                                 (* j1: save increased i before decreasing;reset
 228                                                 parsePosition *)
 229                                                 j1:=i;
 230                                                 DEC(i); 
 231                                                 sh.getSharedText().setParsePos(i);
 232                                                 WriteMessage("MatchPiece case 3 * or + in Repeat vor MatchAtom 2");
 233                                                 
 234                                                 MatchAtom(temp_atom,temp_flag);
 235                                                 i := sh.getSharedText().getParsePos();
 236                                                 IF temp_atom.regex#NIL THEN i:=j1; 
 237                                                         sh.getSharedText().setParsePos(i);
 238                                                 END;
 239                                                 IF flag THEN INC(q) END;
 240                                                 IF temp_flag THEN DEC(q); flag:=FALSE END;
 241                                         UNTIL (~flag);
 242                                         IF ~flag & (q>=min) THEN flag:=TRUE; 
 243                                                 IF atom.regex=NIL THEN DEC(i) END 
 244                                         END;
 245                                         (*                                                        *)
 246                                         sh.getSharedText().setParsePos(i);
 247                 
 248                         END (*end-case*);
 249                         IF sh.backTrack THEN RETURN 
 250                         END;
 251                         IF flag THEN res:=1 ELSE res:=-1;
 252                         END;
 253                         
 254                         WriteExit("MatchPiece: ",res,rch.ch,i);
 255                 END MatchPiece; 
 256                 
 257                 PROCEDURE Final():BOOLEAN;
 258                 (* JR to be refined ? *)
 259                 BEGIN
 260                         IF sh.backTrack THEN RETURN FALSE END;
 261                         IF piece.suc=NIL THEN
**** ---------------------------^ Warning: Non-local variable access here
 262                                 IF piece.atom # NIL THEN
**** -----------------------------------^
**** Warning: Non-local variable access here
 263                                         IF piece.atom.range#NIL THEN
**** Warning: Non-local variable access here----^
 264                                                 IF (piece.atom.range.min=0X) & (piece.atom.range.max=0X) THEN RETURN TRUE;
**** Warning: Non-local variable access here-------------^
**** Warning: Non-local variable access here-----------------------------------------^
 265                                                 END;
 266                                         END;
 267                                 END;                                    
 268                         END;
 269                         RETURN FALSE;
 270                 END Final;
 271                 
 272         BEGIN (*MatchBranch*)
 273                 WriteEntry("MatchBranch ",0X,-1);
 274                 
 275                 piece:=branch.piece;
 276                 LOOP 
 277                         IF (piece=NIL) OR Final()(*JR*) THEN  EXIT; (*alle Pieces abgearbeitet und ganzen String*)
 278                         END;
 279                         WriteMessage("matchBranch vor MatchPiece in Loop");
 280                         MatchPiece(piece,flag);
 281                         WriteMessage("matchBranch nach MatchPiece in Loop");
 282                         IF sh.backTrack THEN RETURN 
 283                         END;
 284                         IF flag THEN  piece:=piece.suc; 
 285                                 
 286                         ELSE EXIT 
 287                         END;
 288                 END;
 289                 IF flag THEN res:=1 ELSE res:=-1;
 290                 END;
 291                 WriteExit("MatchBranch ch ",res,rch.ch,-1);
 292         END MatchBranch;
 293 
 294 (*TODO reset???*)
 295 BEGIN (*MatchRegex*)
 296         j:=i; (* save position *)
 297         WriteEntry("MatchRegex ch  i (= j): ",' ',i);
 298         branch:=regex.branch;
 299         
 300         LOOP
 301                 IF (branch=NIL) THEN EXIT END; 
 302                 MatchBranch(branch,flag);
 303                 IF sh.backTrack THEN RETURN END;
 304                 IF flag THEN EXIT;
 305                 ELSE 
 306                         
 307                         (*      
 308                                 Out.String("MatchRegex: Branch False  j= ");
 309                         Out.Int(j,2);Out.String("ch=");Out.Char(ch);Out.Ln();
 310                         
 311                         *)
 312                         
 313                         Console.WriteLn();Console.WriteString("MatchRegex Branch false j:");
 314                         Console.WriteInt(j,2);Console.WriteString(" ch=");
 315                         Console.Write(rch.ch);Console.WriteLn();
 316                         (* reset,
 317                         toDo parsePos*)
 318                         i:=j;
 319                         (*        ch:=tarString[i];     *)
 320                         (*****************
 321                         ch := GetCharAtPos(i,sh); 
 322                         ***************************)
 323                         (*sh.getCharAtTextPos(i);*)
 324                         IF sh.backTrack THEN RETURN END;
 325                         branch:=branch.alt
 326                 END
 327         END;
 328         IF flag THEN res:=1 ELSE res:=-1;END;
 329         WriteExit("MatchRegex ch ",res,rch.ch,i);
 330 END MatchRegex;
 331                                 
 332 PROCEDURE Match*(regex:RegexParser.Regex;target:POINTER TO ARRAY OF CHAR):BOOLEAN;
 333 VAR flag:BOOLEAN; branch:RegexParser.Branch;dummy:INTEGER;
 334 BEGIN
 335 
 336         (*___________________________________________
 337         (*tarString:=target;*)
 338         
 339         flag:=FALSE;
 340         i:=0;
 341         (*ch:=tarString[i];*)
 342         dummy:=0;
 343         MatchRegex(regex,dummy,flag);
 344         IF sh.backTrack THEN i:=0; RETURN FALSE END;
 345         IF ch#0X THEN (*ch:=tarString[i]*) ch:=0X; END;
 346         IF (flag) & (ch#0X) THEN flag:=FALSE END;
 347         RETURN flag
 348         -----------------------------------------*)
 349         RETURN FALSE;
 350 END Match; 
 351 
 352 (* called from ebnf-parser *)
 353 PROCEDURE EditMatch*(regex:RegexParser.Regex;shared:texts.Shared):BOOLEAN;
 354 VAR flag:BOOLEAN;
 355 BEGIN
 356         WriteEntry("RegexMatching.EditMatch ",0X,-1);
 357         flag:=FALSE;
 358         sh:=shared;
 359         
 360         i:=shared.getSharedText().getParsePos();
 361         
 362         Console.WriteString("RegexMatching.EditMatch i: ");
 363         Console.WriteInt(i,2);
 364         Console.WriteLn;
 365         
 366         Console.WriteString("RegexMatching.EditMatch TextLen: ");
 367         Console.WriteInt(shared.getSharedText().getTextLen(),2);
 368         Console.WriteLn;
 369         MatchRegex(regex,i,flag);
 370         IF sh.backTrack THEN i:=0; 
 371                 (* reset todo*)
 372                 RETURN FALSE; 
 373         END;
 374         RETURN flag;
 375         
 376 END EditMatch;
 377 
 378 
 379 
 380 END RegexMatching.

There were: No errors, and  10 warnings


