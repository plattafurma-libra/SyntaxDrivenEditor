Listing:

   1 MODULE RegexMatching;
   2 
   3 IMPORT RegexParser, texts, Console;
   4 
   5 TYPE Regex=POINTER TO EXTENSIBLE RECORD (RegexParser.RegexType) END;
   6 
   7 VAR i:INTEGER;
   8         
   9         rch:texts.RichChar;
  10         (*tarString:POINTER TO ARRAY OF CHAR;*)
  11         sh:texts.Shared;
  12         
  13 PROCEDURE WriteMessage(str:ARRAY OF CHAR);
  14 BEGIN
  15         Console.WriteString(str);
  16         Console.WriteLn;
  17 END WriteMessage;
  18                 
  19 PROCEDURE WriteEntry(fromProcedure:ARRAY OF CHAR;ch:CHAR;i:INTEGER);
  20 
  21 
  22 BEGIN   
  23         Console.WriteString(fromProcedure +" Entry:  ");                
  24         IF ch # 0X THEN Console.Write(ch);
  25         END;
  26         
  27         IF i >= 0 THEN Console.WriteString(" Position i: "); Console.WriteInt(i,2);
  28         END;
  29         Console.WriteLn();
  30 END WriteEntry;
  31 
  32 
  33 
  34 PROCEDURE WriteExit(fromProcedure:ARRAY OF CHAR;valResult:INTEGER;ch:CHAR;i:INTEGER);
  35 
  36 VAR res:ARRAY 10 OF CHAR; 
  37 BEGIN
  38         IF valResult=1  THEN res:="TRUE" ELSIF valResult=-1 THEN res:="FALSE" ELSE res:=""; END;
  39         Console.WriteString(fromProcedure +" Exit: "+res+"  ");         
  40         IF ch # 0X THEN Console.Write(ch);
  41         END;
  42         IF i >= 0 THEN Console.WriteString(" Position i: ");Console.WriteInt(i,2);
  43         END;
  44         Console.WriteLn();
  45 END WriteExit;
  46 
  47 (*-------------------------Matching Procedures---------------------------*)
  48 
  49 PROCEDURE MatchNegRange(range:RegexParser.Range; VAR flag:BOOLEAN);
  50 BEGIN
  51         WriteMessage("MatchNegRange Entry");
  52         IF sh.backTrack THEN WriteMessage("MatchNegRange backTrack");RETURN END;
  53         REPEAT
  54                 flag:=((rch.ch<range.min) OR (rch.ch>range.max));
  55                 range:=range.next;
  56         UNTIL range=NIL;
  57         WriteMessage("MatchNegRange Exit");
  58 END MatchNegRange;
  59 
  60 PROCEDURE MatchRange(range:RegexParser.Range; VAR flag:BOOLEAN);
  61 BEGIN
  62         WriteEntry("MatchRange ",rch.ch,-1);
  63         IF sh.backTrack THEN RETURN END;
  64         LOOP
  65                 IF range=NIL THEN EXIT END;
  66                 Console.WriteString("MatchRange range.min: "); 
  67                 Console.Write(range.min);
  68                 Console.WriteString(" MatchRange range.max: "); 
  69                 Console.Write(range.max);
  70                 Console.WriteLn();
  71                 flag:=((rch.ch>=range.min) & (rch.ch<=range.max));
  72                 IF flag=TRUE THEN EXIT;
  73                 ELSE range:=range.next 
  74                 END;
  75         END;
  76         (*  are there any  subRanges *)
  77         LOOP
  78                 IF range=NIL THEN EXIT END;
  79                 IF range.sub THEN EXIT END;
  80                 range:=range.next
  81         END;
  82         IF range#NIL THEN MatchNegRange(range,flag) END;
  83         
  84         WriteExit("MatchRange ch ",0,rch.ch,-1);
  85 END MatchRange; 
  86 
  87 
  88 PROCEDURE MatchChar(Ptr:POINTER TO ARRAY OF CHAR;rch:texts.RichChar):BOOLEAN;
  89 
  90 BEGIN
  91         (* TO DO *)
  92         RETURN TRUE;
  93 
  94 END MatchChar;
  95 
  96 PROCEDURE Size(regex:RegexParser.Regex; rch:texts.RichChar):BOOLEAN;
  97 BEGIN
  98         IF regex.Font.size = NIL THEN RETURN TRUE
  99         ELSE RETURN MatchChar(regex.Font.size,rch);
 100         END; 
 101 END Size;
 102 
 103 PROCEDURE Style(regex:RegexParser.Regex; rch:texts.RichChar):BOOLEAN;
 104 BEGIN
 105         IF regex.Font.style = NIL THEN RETURN TRUE
 106         ELSE RETURN MatchChar(regex.Font.style,rch);
 107         END; 
 108 END Style;
 109 
 110 PROCEDURE Typeface(regex:RegexParser.Regex; rch:texts.RichChar):BOOLEAN;
 111 BEGIN
 112         IF regex.Font.typeface = NIL THEN RETURN TRUE
 113         ELSE RETURN MatchChar(regex.Font.typeface,rch);
 114         END; 
 115 END Typeface;
 116 
 117 PROCEDURE Weight(regex:RegexParser.Regex; rch:texts.RichChar):BOOLEAN;
 118 BEGIN
 119         IF regex.Font.weight = NIL THEN RETURN TRUE
 120         ELSE RETURN MatchChar(regex.Font.weight,rch);
 121         END; 
 122 END Weight;
 123 
 124 PROCEDURE Color(regex:RegexParser.Regex; rch:texts.RichChar):BOOLEAN;
 125 BEGIN
 126         IF regex.Font.color = NIL THEN RETURN TRUE
 127         ELSE RETURN MatchChar(regex.Font.color,rch);
 128         END; 
 129 END Color;
 130 
 131 
 132 PROCEDURE FontMatch(rch:texts.RichChar; regex:RegexParser.Regex):INTEGER;
 133 
 134         
 135 
 136 BEGIN
 137         IF regex.Font=NIL THEN RETURN 1 
 138         ELSIF Size(regex,rch) & Style(regex,rch) & Typeface(regex,rch) &  
 139                 Weight(regex,rch) & Color(regex,rch) THEN
 140                 RETURN 1 
 141         ELSE RETURN -1
 142         END;
 143 END FontMatch;
 144 
 145 
 146 PROCEDURE MatchRegex(regex:RegexParser.Regex;resetPos:INTEGER;VAR flag:BOOLEAN);
**** ---------------------^
**** Warning: This variable is accessed from nested procedure
**** ---------------------------------------------^
**** Warning: This variable is accessed from nested procedure
**** Access to variable <regex> will be inefficient
**** Access to variable <resetPos> will be inefficient
 147 VAR  branch:RegexParser.Branch;
 148                 j:INTEGER (*ResetPosition*);
 149                 res:INTEGER;
 150         
 151         PROCEDURE MatchBranch(branch:RegexParser.Branch; VAR flag:BOOLEAN);
 152         VAR piece:RegexParser.Piece;
**** ------------^ Warning: This variable is accessed from nested procedure
**** Access to variable <piece> will be inefficient
 153         res:INTEGER;
 154         
 155                 PROCEDURE MatchPiece(piece:RegexParser.Piece; VAR flag:BOOLEAN);
 156                 VAR atom,temp_atom:RegexParser.Atom;
 157                                 min,max (* nr repetitions *),
 158                                 q (*counts number matches for quantified or for '*' or '+'*),
 159                                 j1:INTEGER (* interim value for i; formerly j; is named here j1 for
 160                                 difference with j in MatchRegex *);
 161                                 temp_flag:BOOLEAN;
 162                                 res:INTEGER;
 163                                 
 164                         PROCEDURE MatchAtom(atom:RegexParser.Atom; VAR flag:BOOLEAN);
 165                         VAR range:RegexParser.Range;res:INTEGER;
 166                         
 167                                 
 168                         BEGIN (* MatchAtom *)
 169                                 WriteEntry("MatchAtom ",' ',-1);
 170                                 IF sh.backTrack THEN 
 171                                         WriteMessage("MatchAtom sh.backTrack RETURN");
 172                                         RETURN 
 173                                 END;
 174                                 IF atom.range=NIL THEN  
 175                                         WriteMessage("MatchAtom range Nil vor MatchRegex");
 176                                         MatchRegex(atom.regex,resetPos,flag);
**** Warning: Non-local variable access here-----------------------^
 177                                 ELSE    
 178                                 
 179                                         rch := sh.getSym();
 180                                                         
 181                                         IF sh.backTrack THEN 
 182                                                 WriteMessage("MatchAtom sh.backtrach nach getSym");
 183                                                 RETURN 
 184                                         END;                    
 185                                         
 186                                         Console.WriteString("MatchAtom getSym ch: ");
 187                                         Console.Write(rch.ch); 
 188                                         Console.WriteLn();
 189                                                 
 190                                         IF atom.range.pos THEN
 191                                                 WriteMessage("MatchAtom range.pos vor MatchRange");
 192                                                 MatchRange(atom.range,flag); 
 193                                         ELSE 
 194                                                 WriteMessage("MatchAtom vor MatchNegRange");
 195                                                 MatchNegRange(atom.range,flag);
 196                                         END;
 197                                 
 198                                 END;
 199                                 IF flag THEN 
 200                                         res:= FontMatch(rch,regex);
**** Warning: Non-local variable access here---------------------^
 201                                         
 202                                 ELSE
 203                                         res:=-1;
 204                                 END;
 205                                 
 206                                 WriteExit("MatchAtom result, ch ",res,rch.ch,-1);
 207                         END MatchAtom;
 208                         
 209                 BEGIN (*MatchPiece*) (*hier Matching-Procedures aufrufen piece.MatchProcQuantified(piece,flag)*)
 210                         (*MatchProcOptional (?)*)
 211                         WriteEntry("MatchPiece ",0X,-1);
 212                         IF sh.backTrack THEN RETURN END;
 213                         flag:=FALSE;
 214                         temp_flag:=FALSE;
 215                         q:=0;
 216                         (* get value of i, needed in repeat loops down case 2 and case 3 *)
 217                         i := sh.getSharedText().getParsePos();
 218                         CASE piece.id OF 
 219                                 1:  (* question mark, '?', optional *)
 220                                         WriteMessage("MatchPiece Case 1 Optional");
 221                                 
 222                                         atom:=piece.atom;   
 223                                         min:=0;
 224                                         max:=1;
 225                                         WriteMessage("MatchPiece Case 1 Optional vor MatchAtom");
 226                                         MatchAtom(atom,flag);
 227                                         IF sh.backTrack THEN RETURN END;
 228                                         IF ~flag THEN flag:=TRUE;
 229                                                 IF atom.regex=NIL THEN DEC(i) END
 230                                         END; 
 231                                         sh.getSharedText().setParsePos(i);
 232                 
 233                                 |2: (* repetitions, quantified (???) *)
 234                                         WriteMessage("MatchPiece Case 2 Quantifier ");
 235                                         atom:=piece.atom;   (*Quantified*)
 236                                         min:=piece.min.val;
 237                                         max:=piece.max.val;
 238                                         Console.WriteString("MatchPiece min");Console.WriteInt(min,2);
 239                                         Console.WriteString("MatchPiece max");Console.WriteInt(max,2);
 240                                         q:=0;
 241                                         
 242                                         
 243                                         j1:=i;
 244                                         REPEAT 
 245                                                 WriteMessage("MatchPiece Case 2 quantified in Repeat vor MatchAtom");
 246                                                 MatchAtom(atom,flag);
 247                                                 i:=sh.getSharedText().getParsePos();
 248                                                 IF sh.backTrack THEN 
 249                                                         WriteMessage("MatchPiece in Repeat sh.backTrack");
 250                                                         RETURN 
 251                                                 END;
 252                                                 IF flag THEN INC(q) END;
 253                                         UNTIL (~flag) OR (q=max);
 254                                         IF ~flag & (q>=min) THEN flag:=TRUE; 
 255                                                 IF atom.regex=NIL THEN DEC(i) END 
 256                                         END;
 257                                         sh.getSharedText().setParsePos(i);
 258                                         
 259                                 |3: (* asterisk('*' ) or plus('+') *)
 260                                         WriteMessage("MatchPiece Case 3 * or + ");
 261                                         atom:=piece.atom; (*Unbounded*) (*max=NIL*)
 262                                         temp_atom:=piece.suc.atom;
 263                                         min:=piece.min.val;
 264                                         REPEAT 
 265                                                 WriteMessage("MatchPiece case 3 * or + in Repeat vor MatchAtom 1");
 266                                                 MatchAtom(atom,flag);
 267                                                 IF sh.backTrack THEN RETURN END;
 268                                                 i:=sh.getSharedText().getParsePos();
 269                                                 (* j1: save increased i before decreasing;reset
 270                                                 parsePosition *)
 271                                                 j1:=i;
 272                                                 DEC(i); 
 273                                                 sh.getSharedText().setParsePos(i);
 274                                                 WriteMessage("MatchPiece case 3 * or + in Repeat vor MatchAtom 2");
 275                                                 
 276                                                 MatchAtom(temp_atom,temp_flag);
 277                                                 i := sh.getSharedText().getParsePos();
 278                                                 IF temp_atom.regex#NIL THEN i:=j1; 
 279                                                         sh.getSharedText().setParsePos(i);
 280                                                 END;
 281                                                 IF flag THEN INC(q) END;
 282                                                 IF temp_flag THEN DEC(q); flag:=FALSE END;
 283                                         UNTIL (~flag);
 284                                         IF ~flag & (q>=min) THEN flag:=TRUE; 
 285                                                 IF atom.regex=NIL THEN DEC(i) END 
 286                                         END;
 287                                         (*                                                        *)
 288                                         sh.getSharedText().setParsePos(i);
 289                 
 290                         END (*end-case*);
 291                         IF sh.backTrack THEN RETURN 
 292                         END;
 293                         IF flag THEN res:=1 ELSE res:=-1;
 294                         END;
 295                         
 296                         WriteExit("MatchPiece: ",res,rch.ch,i);
 297                 END MatchPiece; 
 298                 
 299                 PROCEDURE Final():BOOLEAN;
 300                 (* JR to be refined ? *)
 301                 BEGIN
 302                         IF sh.backTrack THEN RETURN FALSE END;
 303                         IF piece.suc=NIL THEN
**** ---------------------------^ Warning: Non-local variable access here
 304                                 IF piece.atom # NIL THEN
**** -----------------------------------^
**** Warning: Non-local variable access here
 305                                         IF piece.atom.range#NIL THEN
**** Warning: Non-local variable access here----^
 306                                                 IF (piece.atom.range.min=0X) & (piece.atom.range.max=0X) THEN RETURN TRUE;
**** Warning: Non-local variable access here-------------^
**** Warning: Non-local variable access here-----------------------------------------^
 307                                                 END;
 308                                         END;
 309                                 END;                                    
 310                         END;
 311                         RETURN FALSE;
 312                 END Final;
 313                 
 314         BEGIN (*MatchBranch*)
 315                 WriteEntry("MatchBranch ",0X,-1);
 316                 
 317                 piece:=branch.piece;
 318                 LOOP 
 319                         IF (piece=NIL) OR Final()(*JR*) THEN  EXIT; (*alle Pieces abgearbeitet und ganzen String*)
 320                         END;
 321                         WriteMessage("matchBranch vor MatchPiece in Loop");
 322                         MatchPiece(piece,flag);
 323                         WriteMessage("matchBranch nach MatchPiece in Loop");
 324                         IF sh.backTrack THEN RETURN 
 325                         END;
 326                         IF flag THEN  piece:=piece.suc; 
 327                                 
 328                         ELSE EXIT 
 329                         END;
 330                 END;
 331                 IF flag THEN res:=1 ELSE res:=-1;
 332                 END;
 333                 WriteExit("MatchBranch ch ",res,rch.ch,-1);
 334         END MatchBranch;
 335 
 336 (*TODO reset???*)
 337 BEGIN (*MatchRegex*)
 338         j:=i; (* save position *)
 339         WriteEntry("MatchRegex ch  i (= j): ",' ',i);
 340         branch:=regex.branch;
 341         
 342         LOOP
 343                 IF (branch=NIL) THEN EXIT END; 
 344                 MatchBranch(branch,flag);
 345                 IF sh.backTrack THEN RETURN END;
 346                 IF flag THEN EXIT;
 347                 ELSE 
 348                         
 349                         (*      
 350                                 Out.String("MatchRegex: Branch False  j= ");
 351                         Out.Int(j,2);Out.String("ch=");Out.Char(ch);Out.Ln();
 352                         
 353                         *)
 354                         
 355                         Console.WriteLn();Console.WriteString("MatchRegex Branch false j:");
 356                         Console.WriteInt(j,2);Console.WriteString(" ch=");
 357                         Console.Write(rch.ch);Console.WriteLn();
 358                         (* reset,
 359                         toDo parsePos*)
 360                         i:=j;
 361                         (*        ch:=tarString[i];     *)
 362                         (*****************
 363                         ch := GetCharAtPos(i,sh); 
 364                         ***************************)
 365                         (*sh.getCharAtTextPos(i);*)
 366                         IF sh.backTrack THEN RETURN END;
 367                         branch:=branch.alt
 368                 END
 369         END;
 370         IF flag THEN res:=1 ELSE res:=-1;END;
 371         WriteExit("MatchRegex ch ",res,rch.ch,i);
 372 END MatchRegex;
 373                                 
 374 PROCEDURE Match*(regex:RegexParser.Regex;target:POINTER TO ARRAY OF CHAR):BOOLEAN;
 375 VAR flag:BOOLEAN; branch:RegexParser.Branch;dummy:INTEGER;
 376 BEGIN
 377 
 378         (*___________________________________________
 379         (*tarString:=target;*)
 380         
 381         flag:=FALSE;
 382         i:=0;
 383         (*ch:=tarString[i];*)
 384         dummy:=0;
 385         MatchRegex(regex,dummy,flag);
 386         IF sh.backTrack THEN i:=0; RETURN FALSE END;
 387         IF ch#0X THEN (*ch:=tarString[i]*) ch:=0X; END;
 388         IF (flag) & (ch#0X) THEN flag:=FALSE END;
 389         RETURN flag
 390         -----------------------------------------*)
 391         RETURN FALSE;
 392 END Match; 
 393 
 394 (* called from ebnf-parser *)
 395 PROCEDURE EditMatch*(regex:RegexParser.Regex;shared:texts.Shared):BOOLEAN;
 396 VAR flag:BOOLEAN;
 397 BEGIN
 398         WriteEntry("RegexMatching.EditMatch ",0X,-1);
 399         flag:=FALSE;
 400         sh:=shared;
 401         
 402         i:=shared.getSharedText().getParsePos();
 403         
 404         Console.WriteString("RegexMatching.EditMatch i: ");
 405         Console.WriteInt(i,2);
 406         Console.WriteLn;
 407         
 408         Console.WriteString("RegexMatching.EditMatch TextLen: ");
 409         Console.WriteInt(shared.getSharedText().getTextLen(),2);
 410         Console.WriteLn;
 411         MatchRegex(regex,i,flag);
 412         IF sh.backTrack THEN i:=0; 
 413                 (* reset todo*)
 414                 RETURN FALSE; 
 415         END;
 416         RETURN flag;
 417         
 418 END EditMatch;
 419 
 420 
 421 
 422 END RegexMatching.

There were: No errors, and  10 warnings


