Listing:

   1 MODULE Ebnf;
   2 
   3 (* TO DO for terminal nodes which are matched in Regex:
   4 Font Description: 
   5 1. Size:(e.g., 12 point vs. 16 point), 
   6 2. Style (e.g., plain vs. italic), 
   7 3. Typeface (e.g., Times vs. Helvetica)
   8 4. Weight (e.g., bold vs. normal).
   9 *)
  10 
  11 (* code mainly from Niklaus Wirth Grundlagen und Techniken des Compilerbaus, from English
  12 version Compiler Construction, too (s. http://www.ethoberon.ethz.ch/WirthPubl/CBEAll.pdf) and for more implementation
  13 details from Wirth Compilerbau Stuttgart Teubner 1986 (for Modula 2).
  14 Changes by JR;
  15 Parser is rewritten to be completely recursive for to establish unlimited backtracking in parse.
  16 *)
  17 
  18 
  19 (* Wirth example: ebnf defined in ebnf
  20 syntax        =     {production}.           
  21 production    =     identifier "=" expression "." . 
  22 expression    =     term {"|" term}. 
  23 term          =     factor {factor}.              
  24 factor        =     identifier | string | "(" expression ")"
  25  | "[" expression "]" | "{" expression "}". 
  26 By application of the given translation rules and subsequent simplification the following parser 
  27 results. It is formulated as an Oberon module: 
  28 *)
  29 
  30 
  31  
  32 IMPORT RTS,TextsCP, texts, Console, RegexApi, RegexMatching,RegexParser,CPmain; 
  33 
  34 CONST IdLen = 32; 
  35     ident = 0; literal = 2; lparen = 3; lbrak = 4; lbrace = 5; bar = 6; eql = 7; 
  36     rparen = 8; rbrak = 9; rbrace = 10; period = 11; other = 12; 
  37     
  38 TYPE Identifier = ARRAY IdLen OF CHAR; 
  39 
  40      Symbol*=POINTER TO EXTENSIBLE RECORD alt,next:Symbol 
  41      END;
  42      
  43      Terminal=POINTER TO RECORD(Symbol) sym:INTEGER;name:ARRAY IdLen OF CHAR; 
  44         isString:BOOLEAN (* needed für Regex processing, strings are treated other than
  45         regex which start with '['  *);
  46         reg:RegexApi.Regex;
  47      END;
  48      
  49      (* wrapper for Symbols p, q,r,s which might be used in ebnf as substitute for call by name;
  50      to be used for reemplimation in java 
  51      *)
  52      
  53      SymbolsWrapper =POINTER TO RECORD p,q,r,s:Symbol;
  54      END;
  55      
  56      Nonterminal = POINTER TO NTSDesc;
  57          NTSDesc = RECORD (Symbol) this: Header END;
  58          Header = POINTER TO HDesc;
  59          HDesc = RECORD sym: Symbol; entry: Symbol; suc:Header; name: ARRAY IdLen OF CHAR END;
  60               
  61 VAR list,sentinel,h:Header;
  62         q,r,s: Symbol;
  63         startsymbol*:Symbol (* startsymbol for parse if called from editor, is exported to call of parse procedure*);
  64 
  65         ch: CHAR;        
  66     sym:      INTEGER;       
  67     lastpos:  INTEGER;  
  68     maxPosInParse* : INTEGER; (* maxPosition of chars read. is used to indicate position
  69                                                 of error in input   *)  
  70     id:       Identifier;       
  71     R:        TextsCP.Reader;       
  72     W:        TextsCP.Writer;       
  73     
  74     (*txt:texts.Texts;*)
  75     shared:texts.Shared;
  76     
  77   
  78 PROCEDURE error(n: INTEGER); 
  79               VAR pos: INTEGER;       
  80 BEGIN pos := TextsCP.Pos(R); 
  81         Console.WriteString("error nr: ");Console.WriteInt(n,2);Console.WriteLn;
  82     IF pos > lastpos+4 THEN  (*avoid spurious error messages*) 
  83         TextsCP.WriteString(W, "  pos"); TextsCP.WriteInt(W, pos, 6); 
  84         TextsCP.WriteString(W, "  err"); TextsCP.WriteInt(W, n, 4); lastpos := pos; 
  85         TextsCP.WriteString(W,"sym"); TextsCP.WriteInt(W, sym, 4); 
  86         TextsCP.WriteLn(W);   (* TextsCP.Append(Oberon.Log,W.buf)   *) 
  87     END;
  88     RTS.Throw(" error");       
  89 END error;     
  90 
  91 PROCEDURE GetSym; 
  92 VAR i:INTEGER;       
  93 BEGIN 
  94         WHILE ~R.eot & (ch <= " ") DO TextsCP.Read(R, ch) END ;   (*skip blanks*) 
  95     CASE ch OF       
  96                         "A" .. "Z", "a" .. "z": sym := ident; i := 0; 
  97                         REPEAT id[i] := ch; INC(i); TextsCP.Read(R, ch) 
  98                         UNTIL (CAP(ch) < "A") OR (CAP(ch) > "Z"); 
  99             id[i]:=0X       
 100                         |22X:  (*quote*) 
 101                                 TextsCP.Read(R, ch); sym := literal; i := 0; 
 102                                 (* wirth----------------------------------- 
 103                                 WHILE (ch # 22X) & (ch > " ") DO 
 104                     id[i]:= ch;
 105                     INC(i);
 106                     TextsCP.Read(R,ch)       
 107                                 END ; 
 108                                 IF ch <= " " THEN error(1) END ; 
 109                                 ------------------------------------------*)
 110                                 (* JR, regex *)
 111                                 LOOP
 112                                         IF ch=22X THEN
 113                                                 IF i=0 (*empty terminal string*) THEN EXIT
 114                                                 ELSIF id[i] # '\'  (* quote is NOT escaped *) THEN EXIT
 115                                                 ELSIF (i >0) & (id[i-1] = '\') (* '\' is escaped by '\', 
 116                                                 i.e. termination by '"'*)
 117                                                                 THEN EXIT
 118                                                 END;
 119                                         END;
 120                                     id[i]:= ch;
 121                     INC(i);
 122                     IF i > IdLen THEN error(1);
 123                     END;
 124                     TextsCP.Read(R,ch)       
 125                                 END ; 
 126                                 (* Wirth IF ch <= " " THEN error(1) END ;       *)
 127                                 id[i] := 0X; TextsCP.Read(R, ch) 
 128                                 
 129                         |  "=" : sym := eql; TextsCP.Read(R, ch) 
 130                         |  "(" : sym := lparen; TextsCP.Read(R, ch) 
 131                         |  ")" : sym := rparen; TextsCP.Read(R, ch) 
 132                         |  "[" : sym := lbrak; TextsCP.Read(R, ch) 
 133                         |  "]" : sym := rbrak; TextsCP.Read(R, ch) 
 134                         | "{" : sym := lbrace; TextsCP.Read(R, ch) 
 135                         |  "}" : sym := rbrace; TextsCP.Read(R, ch) 
 136                         | "|" : sym := bar; TextsCP.Read(R, ch) 
 137                         |  "." : sym := period; TextsCP.Read(R, ch) 
 138                         ELSE sym := other; 
 139                                 (* if entered by jr; otherwise eof error*)
 140                                 IF R.eot THEN ch:=' ' ELSE TextsCP.Read(R, ch);END; 
 141                 END       
 142 END GetSym; 
 143 
 144  
 145 PROCEDURE find(str : ARRAY OF CHAR; VAR h:Header);
 146 VAR h1:Header;
 147 BEGIN
 148         h1:=list;
 149         sentinel.name:=str$;
 150         WHILE h1.name#str DO h1:=h1.suc;END;
 151         IF h1 = sentinel THEN (*insert*)
 152                 NEW(sentinel);
 153                 h1.suc := sentinel;
 154                 h1.entry:=NIL;
 155         END;    
 156         h:=h1;
 157 END find;
 158 
 159 PROCEDURE link(p,q:Symbol);
 160 VAR t:Symbol;
 161 
 162 BEGIN (* insert q in places indicated by linked chain p *)
 163         WHILE p # NIL DO
 164                 t := p; p:=t.next; t.next:=q;
 165         END;
 166 END link;
 167    
 168 
 169 PROCEDURE expression(VAR p,q,r,s:Symbol);   
 170 VAR q1, s1:Symbol;
 171 
 172     
 173     PROCEDURE term(VAR p,q,r,s:Symbol);  
 174     VAR p1,q1,r1,s1:Symbol;     
 175 
 176        PROCEDURE factor(VAR p,q,r,s:Symbol);    
 177        VAR a:Symbol;identifiernonterminal:Nonterminal;literalterminal:Terminal; h:Header;
 178        BEGIN h:=NIL;a:=NIL;identifiernonterminal:=NIL;literalterminal:=NIL;                     
 179             IF sym = ident (*nonterminal*) THEN
 180                 NEW(identifiernonterminal);
 181                 find(id$,h);
 182                 (* name of nonterminal symbol may be accessed via h.name);*)
 183                 identifiernonterminal.this:=h;
 184                 a:=identifiernonterminal;a.alt:=NIL;a.next:=NIL;
 185                 
 186                 (*record(T0, id, 1);*)  
 187                 p:=a;q:=a;r:=a;s:=a;           
 188                 GetSym 
 189             ELSIF sym = literal (*terminal*) THEN 
 190                 NEW(literalterminal);literalterminal.sym:=sym;
 191                 literalterminal.name:=id$; 
 192                 literalterminal.reg:=RegexApi.CreateRegex(id$);
 193                 (* string, not regex starting with '[' *)
 194                 literalterminal.isString:=id[0]#'[';
 195                 a:=literalterminal;a.alt:=NIL;a.next:=NIL;
 196                 (*record(T1, id, 0);*) 
 197                 
 198                 p:=a;q:=a;r:=a;s:=a; 
 199                 GetSym 
 200             ELSIF sym = lparen THEN 
 201                         GetSym; 
 202                         expression(p,q,r,s); 
 203                 IF sym = rparen THEN GetSym ELSE error(2) END 
 204             ELSIF sym = lbrak THEN 
 205                         GetSym; expression(p,q,r,s); 
 206                         
 207                         NEW(literalterminal);literalterminal.sym:=sym;
 208                 literalterminal.name:=""; 
 209                 a:=literalterminal;a.alt:=NIL;a.next:=NIL;
 210                 q.alt:=a;s.next:=a;q:=a;s:=a;
 211                 IF sym = rbrak THEN GetSym ELSE error(3) END 
 212             ELSIF sym = lbrace THEN 
 213                         GetSym; expression(p,q,r,s); 
 214                         
 215                         NEW(literalterminal);literalterminal.sym:=sym;
 216                 literalterminal.name:=""; 
 217                 a:=literalterminal;a.alt:=NIL;a.next:=NIL;
 218                         q.alt:=a;q:=a;r:=a;s:=a;
 219                 IF sym = rbrace THEN GetSym ELSE error(4) END 
 220             ELSE    error(5)    
 221                 END;            
 222         END factor;    
 223  
 224     
 225      BEGIN (*term*) 
 226         p1:=NIL;q1:=NIL;r1:=NIL;s1:=NIL;        
 227         factor(p,q,r,s);           
 228         WHILE sym < bar DO 
 229                 factor(p1,q1,r1,s1);link(r,p1);r:=r1;s:=s1; 
 230         END;            
 231        
 232      END term; 
 233            
 234     BEGIN (*expression*)  
 235         q1:=NIL;s1:=NIL;  
 236         
 237         term(p,q,r,s);      
 238         WHILE sym = bar DO GetSym; term(q.alt,q1,s.next,s1);q:=q1;s:=s1; 
 239         END;    
 240         
 241     END expression;
 242  
 243 
 244            
 245 PROCEDURE production;       
 246 BEGIN (*sym = ident*) 
 247         
 248         find(id$,h);
 249         GetSym; 
 250     IF sym = eql THEN GetSym ELSE error(7) END; 
 251     expression(h.entry,q,r,s); link(r,NIL);   
 252     IF sym = period THEN 
 253         GetSym
 254     ELSE error(8) 
 255     END;
 256      
 257 END production;
 258 
 259 
 260       
 261 PROCEDURE syntax;       
 262 BEGIN           
 263         TextsCP.WriteStringLn("syntax start");
 264     WHILE sym = ident DO production END;  
 265     TextsCP.WriteStringLn("syntax end"); 
 266 END syntax;  
 267 
 268 (* checks whether there is a nonterminalwhich does not lead to a terminal*)
 269 PROCEDURE checkSyntax():BOOLEAN;
 270 VAR h:Header;error:BOOLEAN;(*i:INTEGER;*)
 271 BEGIN
 272         Console.WriteLn();
 273         h:=list;error:=FALSE;
 274         WHILE h # sentinel DO   
 275                 IF h.entry=NIL THEN 
 276                         error:=TRUE;
 277                         Console.WriteString("undefined Symbol "+h.name);Console.WriteLn();
 278                 ELSE Console.WriteString("Symbol "+h.name);Console.WriteLn();
 279                         (*i:=0;
 280                         WHILE h.name[i]#0X DO Console.Write(h.name[i]);INC(i);END;Console.WriteLn();
 281                         *)
 282                 END;
 283                 h:=h.suc;
 284         END (*while*);
 285         RETURN ~error;
 286 END checkSyntax;
 287             
 288 PROCEDURE Compile*():BOOLEAN; 
 289 VAR ok:BOOLEAN;
 290 BEGIN (*set R to the beginning of the text to be compiled*) 
 291         TextsCP.WriteString(W,"Compile Start read Grammar");Console.WriteLn();
 292         R.filename:= "C://users//rols//lexGrammar.txt"; 
 293         TextsCP.OpenReader(R);
 294         Console.WriteString("EBNF nach OpenReader");Console.WriteLn();  
 295         
 296         ok:=FALSE;
 297     lastpos := 0; 
 298     NEW(sentinel);list:=sentinel;h:=list;
 299     TextsCP.Read(R, ch); 
 300     GetSym;
 301     syntax;  
 302     IF checkSyntax() THEN ok:=TRUE;
 303     END;   
 304     (*TextsCP.Append(Oberon.Log,W.buf) *)   
 305     IF ok THEN
 306         TextsCP.WriteString(W,"Compile ok")
 307     ELSE TextsCP.WriteString(W,"Compile failed");
 308     END;
 309     Console.WriteLn(); 
 310     RETURN ok; 
 311 END Compile;    
 312 
 313 
 314 PROCEDURE parse*(node:Symbol):BOOLEAN;
 315 
 316 VAR resParse:BOOLEAN; pos:INTEGER;nodeName:ARRAY IdLen OF CHAR;
 317 
 318                 PROCEDURE match(tNode:Terminal):BOOLEAN;
 319         
 320                 VAR index:INTEGER;ch:CHAR;testChar:CHAR;resMatch:BOOLEAN;
 321         
 322                 (*          *)
 323                 BEGIN
 324                         Console.WriteString("parse.match Start pos: ");
 325                         Console.WriteInt(shared.getSharedText().getParsePos(),2);
 326                         Console.WriteString(" "+tNode.name$);
 327                         Console.WriteLn();
 328                         IF shared.backTrack THEN
 329                         
 330                                 Console.WriteString(" Match backTrack");
 331                                 Console.WriteLn();
 332                                 RETURN FALSE;
 333                         END;
 334                         
 335                         index:=0;
 336                         IF      tNode.isString THEN
 337                                 resMatch := RegexMatching.Match(tNode.name$,shared);
**** Actual parameter is not compatible with formal type-------------------------^
**** Actual par-type was <string>, Formal type was RegexParser.Regex-------------^
**** Actual parameter is not compatible with formal type---------------------------^
**** Actual par-type was texts.Shared, Formal type was POINTER TO ARRAY OF CHAR----^
 338                         ELSE            
 339                                 resMatch:=
 340                                 RegexMatching.EditMatch(tNode.reg.regex,shared);
 341                         END;
 342                         IF resMatch THEN 
 343                                 Console.WriteString(" after EditMatch resMatch true");
 344                         ELSE
 345                                 Console.WriteString(" after EditMatch resMatch false");
 346                         END;
 347                         
 348                         Console.WriteString(" for "+tNode.name$);
 349                         (*Console.WriteInt(txt.getParsePos(),2);*) 
 350                         Console.WriteLn();
 351                         IF shared.backTrack THEN 
 352                                 Console.WriteString("EditMatch backTrack true");                                
 353                                 Console.WriteLn();
 354                                 RETURN FALSE 
 355                         ELSE
 356                                 RETURN resMatch;
 357                         END;            
 358                 END match;
 359         
 360         
 361 
 362 BEGIN (*parse*)
 363         (* 17-12-12 *)
 364         IF node = NIL THEN 
 365                 Console.WriteString("parse entry node nil");
 366                 Console.WriteLn();
 367                 RETURN TRUE;
 368         END;
 369         (*
 370         IF shared.backTrack THEN
 371                 Console.WriteString("parse backTrack true");
 372                 Console.WriteLn();
 373                 IF node#list.entry THEN RETURN FALSE
 374                 ELSE
 375                         txt.setTextPos(0);
 376                         Console.WriteString("parse after backtrack restart");
 377                         Console.WriteLn();
 378                         shared.backTrack:=FALSE;
 379                 END;
 380         END;
 381         *)
 382         IF node IS Terminal THEN
 383                 nodeName:=node(Terminal).name$
 384         ELSE nodeName:=node(Nonterminal).this.name$;
 385         END;
 386         Console.WriteString("parse node: "+nodeName);
 387         Console.WriteLn();
 388         pos:=shared.getSharedText().getParsePos();
 389         IF pos>maxPosInParse THEN maxPosInParse := pos;
 390         END;
 391         resParse:=FALSE;        
 392         (* 17-12-12 IF node = NIL THEN RETURN TRUE
 393         ELS*)
 394         IF node IS Terminal THEN
 395                         resParse:=match(node(Terminal));
 396                         IF shared.backTrack THEN RETURN FALSE END;
 397                         Console.WriteString("parse resParse after match Pos: ");
 398                         Console.WriteInt(shared.getSharedText().getParsePos(),2);
 399                         IF resParse THEN Console.WriteString(" TRUE")
 400                         ELSE Console.WriteString(" FALSE");
 401                         END;
 402                         Console.WriteLn();                      
 403                 (* depth first recursion for nonterminal *)
 404         ELSE resParse:=parse(node(Nonterminal).this(*pointer to headerlist*).entry);
 405         END;
 406         IF shared.backTrack THEN
 407                 Console.WriteString("parse backTrack true");
 408                 Console.WriteLn();
 409                 IF node # list.entry THEN RETURN FALSE
 410                 ELSE
 411                         shared.getSharedText().setParsePos(0);
 412                         Console.WriteString("parse after backtrack restart");
 413                         Console.WriteLn();
 414                         shared.backTrack:=FALSE;
 415                         (* new start *)
 416                         resParse :=parse(list.entry);
 417                 END;
 418         END;
 419         (* IF shared.backTrack THEN RETURN FALSE END; *)
 420         (* bredth second recursion *)
 421         IF resParse THEN 
 422                 Console.WriteString ("parse vor bredth second");
 423                 Console.WriteLn();
 424                 IF node.next=NIL THEN
 425                         Console.WriteString ("node.next NIL vor bredth second");
 426                         Console.WriteLn();
 427                 END;
 428                 resParse:=parse(node.next);
 429                 IF shared.backTrack THEN RETURN FALSE
 430                 ELSIF resParse  THEN RETURN TRUE;
 431                 END;
 432         END;
 433         IF shared.backTrack THEN RETURN FALSE 
 434         END;
 435         (* alternative after fail, reset position in text *)
 436         shared.getSharedText().setParsePos(pos);
 437         (* no alt node is fail; if needed for distinction of case of empty node which is matched
 438                 without change of pos*)
 439         IF node.alt=NIL THEN RETURN FALSE
 440         ELSIF parse(node.alt) THEN 
 441                 IF shared.backTrack THEN RETURN FALSE ELSE RETURN TRUE
 442                 END;
 443         ELSE shared.getSharedText().setParsePos(pos);
 444                 RETURN FALSE;           
 445         END;
 446         
 447 END parse;
 448 
 449 
 450 PROCEDURE init*(sh:texts.Shared):BOOLEAN;
 451 
 452 VAR ch:CHAR;
 453 BEGIN
 454         Console.WriteString("Init entry");Console.WriteLn();    
 455         IF Compile() THEN               
 456                 Console.WriteString("nach Compile");Console.WriteLn();          
 457                         
 458                 startsymbol:=list.entry;
 459                 shared:=sh;
 460                 (*txt:=shared.getSharedText();(* for getParsePos and setParsePos access*)               
 461                 RegexMatching.GetStartCh(sh);
 462                 *)
 463                 ch:=sh.getSym();
 464                 RETURN TRUE;
 465         ELSE RETURN FALSE;
 466         END;
 467 END init;
 468 
 469 BEGIN (*Auto-generated*)
 470         (********************************************************************)
 471         shared:=NIL;startsymbol:=NIL;
 472         maxPosInParse:=0;
 473         Console.WriteString("EBNF Start ");Console.WriteLn();
 474         
 475                 
 476         IF init(shared) THEN            
 477                 Console.WriteString("EBNF nach Init");Console.WriteLn();                        
 478                 (*  *)
 479                 (*txt:=shared.texts;*)
 480                 
 481                 IF parse(list.entry(* before: list only *)) THEN
 482                         Console.WriteString(" parse ok")
 483                 ELSE Console.WriteString(" parse failed");
 484                         (* return errorposition TO DO *)
 485                         Console.WriteString(" maxPosInParse: ");
 486                         Console.WriteInt(maxPosInParse,2);
 487                 END;
 488                 
 489         END;
 490         
 491         
 492         Console.WriteString("EBNF End");Console.WriteLn();
 493         (*************************************************************************)
 494 END Ebnf.

There were:  2 errors, and No warnings


